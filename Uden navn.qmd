---

title: "Reproducible documents"
author: "Jasmin Jensen"
format: html
---


## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this 

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r setup}
#| message: false
#| warning: false
library(tidyverse)
post_meal_data <- read_csv2(here::here("data/post-meal-insulin.csv"))
small_post_meal_data <- select(post_meal_data, id, Age, BMI, Group, auc_pg, auc_ins, glykemi)

tidier_post_meal_data <- small_post_meal_data |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  ) |>
  filter(glykemi == 0) |>
  select(-glykemi)
tidier_post_meal_data

tidied_post_meal_data <- tidier_post_meal_data |>
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  )
```


## Git 
```{r}
```

## About me 

1. Jasmin Emma Rekly Jensen 

2. Department of Biochemistry and Molecular Biology 

**Hi**, i like to *drink a beer* 

## Simple code 
```{r}
3 * 3
```

## Testing for Git 
Hola hola hoÃ¦a 

## Importing a CSV file 
download.file(
  url = "https://zenodo.org/records/4989220/files/Eliasson_data2.csv?download=1",
  destfile = here::here("data/post-meal-insulin.csv")
)

## Showing the data
```{r}
post_meal_data
glimpse(post_meal_data)
```



## ggplot 
```{r}
#| fig-cap: "Distribution of BMI."
#| label: fig-bmi-histo
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```

## Exercise: discrete plots 
```{r}
#| fig-cap: "Glykemi plot"
#| label: fig-glykemi-1
ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```

See @fig-glykemi-1 above for a cool plot!

## Plotting two discrete variables 
```{r}
ggplot(post_meal_data, aes(x = Group, fill = as.character(glykemi))) +
  geom_bar()
```
```{r}
ggplot(post_meal_data, aes(x = Group, fill = as.character(glykemi))) +
  geom_bar(position = position_dodge())
```



## Side by side plots 
```{r}
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```
```{r}
ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```
```{r side-by-side-figs}
#| label: fig-bmi-glycemia
#| fig-cap: "BMI and glycemia, side by side."
#| fig-subcap:
#|   - "Distribution of BMI."
#|   - "Number of those with glycemia."
#| layout-ncol: 2
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()

ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```


## Plotting two continuous variables 
```{r}
ggplot(post_meal_data, aes(x = BMI, y = auc_pg)) +
  geom_point()
```

```{r}
#| fig-cap: "Scatterplot of BMI and the area under the curve for glucose."
#| label: fig-bmi-auc-pg
ggplot(post_meal_data, aes(x = BMI, y = auc_pg)) +
  geom_point() +
  geom_smooth()
```




## Setting up Github

## Selecting specific coloumns in a dataset 
```{r}
select(post_meal_data, Age)

select(post_meal_data, Age, BMI, Weight)

select(post_meal_data, -Group)
```


## Select helpers 
```{r}
select(post_meal_data, starts_with("PG"))
select(post_meal_data, ends_with("DXA"))

# All columns containing the number "0"
select(post_meal_data, contains("0"))
```


## Renaming coloumns 
```{r}
small_post_meal_data |>
  rename(auc_glucose = auc_pg)

small_post_meal_data |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  )
```


## Select and rename tasks 
```{r}
# Task 1.
post_meal_data |>
  select(contains("OGTT"))

# Task 2.
post_meal_data |>
  select(contains(".."), -contains("..."))

# Task 3.
post_meal_data |>
  rename(
    P.Glucose.minus5.OGTT = P.Glucose..5.OGTT,
    Insulin.minus5.OGTT.X = Insulin..5.OGTT.X
  )

# Task 4.
post_meal_data |>
  select(id, BMI, Length, Weight, Age) |>
  rename(Height = Length)
```

## Filtering data 
```{r}
small_post_meal_data |>
  filter(glykemi == 1)

small_post_meal_data |>
  filter(BMI >= 25)

small_post_meal_data |>
  filter(Group == "CTR")

small_post_meal_data |>
  filter(Group == "CTR", BMI >= 25)
```

## Modifying columns 
```{r}
tidier_post_meal_data |>
  mutate(insulin_glucose_ratio = auc_insulin / auc_glucose)

tidier_post_meal_data |>
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  )
```

## Practice with filter and mutate 
```{r}
# Task 1.
post_meal_data |>
  filter(BMI >= 25 & BMI <= 40 & Group == "FDR")

# Task 2.
post_meal_data |>
  mutate(
    percent_body_fat = (Fat.mass.DXA / Weight) * 100
  ) |>
  filter(percent_body_fat > 30)
```

## Visualizing with jitter plot 
```{r}
tidied_post_meal_data |>
  mutate(overweight = if_else(BMI >= 25, "Overweight", "Not overweight")) |>
  ggplot(aes(x = overweight, y = insulin_glucose_ratio)) +
  geom_jitter()
```
## Plotting three or more variables 
```{r}
tidied_post_meal_data |>
  filter(BMI < 30) |>
  mutate(young = if_else(Age < 40, "Young", "Old")) |>
  ggplot(aes(x = Age, y = auc_insulin, colour = Group)) +
  geom_point() +
  facet_grid(rows = vars(young)) +
  labs(
    x = "Body mass index (BMI)",
    y = "Insulin to glucose ratio"
  )
```
## Make multi-dimensional plots! 
```{r}
#| label: fig-multidimensional
#| fig-cap: "Two, mult-dimensional plots of our data."
#| fig-subcap:
#|   - "Distribution of percent body fat by group and age category."
#|   - "Relationship between BMI and bone mineral density, split by insulin sensitivity."
#| layout-ncol: 2
# Task 1.
post_meal_data |>
  mutate(
    percent_body_fat = (Fat.mass.DXA / Weight) * 100,
    young = if_else(Age < 40, "Young", "Old")
  ) |>
  ggplot(aes(x = Group, y = percent_body_fat, colour = young)) +
  geom_jitter(width = 0.2)

# Task 2.
post_meal_data |>
  mutate(
    insulin_glucose_ratio = (auc_ins / auc_pg),
    insulin_insensitive = if_else(insulin_glucose_ratio > mean(insulin_glucose_ratio), "Insensitive", "Sensitive")
  ) |>
  ggplot(aes(x = BMI, y = Bone.mineral.DXA)) +
  geom_point() +
  geom_smooth() +
  facet_grid(cols = vars(insulin_insensitive))
```
## Changing Colours
```{r}
# Tasks 1. and 2.
post_meal_data |>
  mutate(hyperglycemia = if_else(glykemi == 1, "Yes", "No")) |>
  ggplot(aes(x = Group, fill = hyperglycemia)) +
  geom_bar(position = position_dodge()) +
  scale_fill_viridis_d(option = "cividis")

# Tasks 3. and 4.
post_meal_data |>
  ggplot(aes(x = auc_pg, y = auc_ins, colour = BMI)) +
  geom_point() +
  scale_colour_viridis_c(option = "inferno")
```
## Calculating summary statistics 
```{r}
tidied_post_meal_data |>
  summarise(
    max_bmi = max(BMI),
    min_bmi = min(BMI)
  )
```
## Summarise with group by 
```{r}
#| label: tbl-mean-age-bmi
#| tbl-cap: "Mean values of Age and BMI for each group."
tidied_post_meal_data |>
  group_by(Group) |>
  summarise(
    "Mean Age (yrs)" = round(mean(Age), 1),
    "Mean BMI (kg/m^2^)" = round(mean(BMI), 1)
  ) |>
  ungroup() |>
  knitr::kable()
```
## Bigger table 
```{r}
# Code might look like this:
#| label: tbl-summary-table
#| tbl-cap: "Median values of AUC measurements by age group and family history group."
post_meal_data |>
  # Task 2.
  filter(BMI < 30) |>
  # Task 3.
  mutate(
    age_group = if_else(Age < 40, "Young", "Old"),
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  ) |>
  # Task 4.
  group_by(Group, age_group) |>
  summarise(
    "AUC c-Peptide" = round(median(auc_cp), 1),
    "AUC Glucose" = round(median(auc_pg), 1),
    "AUC Insulin" = round(median(auc_ins), 1)
  ) |>
  # Task 5.
  rename(
    "Age group" = age_group,
    "Family history" = Group
  ) |>
  # Task 6.
  ungroup() |>
  knitr::kable()
```
